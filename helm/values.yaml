commonLabels:
  licenseware.io/app: licenseware # change this to app name e.g. ifmp
  licenseware.io/env: prod
  licenseware.io/tier: backend
  licenseware.io/owner: licenseware

global: # will overwrite all the apps
  imagePullPolicy: Always

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 2000m
      memory: 8Gi

  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
    type: RollingUpdate

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 70

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: node
      whenUnsatisfiable: DoNotSchedule

  ingress:
    className: ""  # defaults to default ingress class

config:
  appHost: ""
  appId: ""
  appUriPrefix: "" # e.g. /ifmp

  persistence:
    claimName: "" # defaults to chart name
    enabled: true
    size: "5Gi"
    accessMode: ReadWriteMany
    storageClassName: efs

  mongo:
    databaseName: ""

  identity:
    user: ""

  fileUploadPath: /tmp/lware

  authService:
    url: ""

  registryService:
    url: ""

  redis:
    host: ""
    port: 6379

  worker:
    broker:
      uri: ""
      celeryConnectionMaxRetry: 3
    backend:
      uri: ""
    celeryDefaultTaskRateLimit: 10/s
    celeryTaskSerializer: json
    celeryTaskCompression: bzip2
    celeryConsumerOffset: latest

secret:
  identity:
    password: ""

  mongo:
    connectionString: ""

  redis:
    password: ""

image:
  repository: ""
  tag: ""
  pullPolicy: Always

imagePullSecrets: []

nameOverride: ""

fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

dashboardApp:
  enabled: false

  command: "" # e.g. uwsgi -w main:app

  healthCheckUri: "/" # e.g. /

  replicaCount: 1

  labels:
    licenseware.io/type: dashboard

  strategy: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  probes:
    livenessProbe:
      tcpSocket:
        port: null # defaults to dashboardApp.service.containerPort
      initialDelaySeconds: 3
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: "" # defaults to dashboardApp.healthCheckUri
        port: ""  # defaults to dashboardApp.service.containerPort
      initialDelaySeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 10

  topologySpreadConstraints: []

  autoscaling: {}

  service:
    enabled: true
    type: ClusterIP
    port: 80
    containerPort: 5000
    portName: http
    protocol: TCP

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # haproxy-ingress.github.io/rewrite-target: /
      # nginx.ingress.kubernetes.io/rewrite-target: /
    hosts:
      - host: api.licenseware.io
        http:
          paths:
            - backend:
                service:
                  name: service-name
                  port:
                    number: 80
              path: ""
              pathType: Prefix
    tls: []

webApp:
  enabled: true

  command: ""

  healthCheckUri: "" # e.g. /ifmp/swagger.json

  replicaCount: 2

  labels:
    licenseware.io/type: web

  strategy: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  probes:
    livenessProbe:
      tcpSocket:
        port: null # defaults to webApp.service.containerPort
      initialDelaySeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: "" # defaults to webApp.healthCheckUri
        port: ""  # defaults to webApp.service.containerPort
      initialDelaySeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 10

  topologySpreadConstraints: []

  autoscaling: {}

  service:
    enabled: true
    type: ClusterIP
    port: 80
    containerPort: 5000
    protocol: TCP
    portName: http

  ingress:
    enabled: true
    className: ""
    annotations: {}
    hosts:
      - host: api.licenseware.io # NOTE: configure this accordingly
        http:
          paths:
            - backend:
                service:
                  name: service-name # this will change inside the chart
                  port:
                    number: 80 # this too will change
              path: "" # defaults to config.appUriPrefix
              pathType: Prefix # NOTE: configure this accordingly

workerApp:
  enabled: true

  command: celery -A main:broker worker -l info -c 4 --autoscale=4,20

  replicaCount: 2

  labels:
    licenseware.io/type: worker

  strategy: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: []

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 70
