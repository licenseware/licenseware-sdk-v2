# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Deploy {{ app_id.upper() }} Api PROD

on:
  push:
    branches:
      - production


# This GitHub Actions workflow runs on every push to the master branch of the
# repository, and deploys a full containerized application on AWS.
#
#
# The workflow builds and deploys the Docker image for one or more
# microservices, using a CloudFormation template to deploy the image to an
# Amazon ECS service.

env:
  REGISTRY: ghcr.io
  TARGET_IMAGE: ghcr.io/{% raw %}${{ github.repository }}{% endraw %}:latest

jobs:
  # Build and deploy a Docker image to an ECS service through CloudFormation.
  #
  # This job can be copied multiple times to deploy different microservices
  # within the same application. For example, if there is another Dockerfile
  # for another microservice in a 'backend-service' folder in the repository,
  # another job named 'deploy-backend-service' can be added to this workflow
  # which builds that Dockerfile and deploys the image to a 'backend-service'
  # ECS service in a separate CloudFormation stack.

  deploy-{{ app_id }}-api:
    name: Deploy {{ app_id }} api
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID_PROD }}{% endraw %}
        aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}{% endraw %}
        aws-region: eu-central-1

    - name: Login ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - uses: actions/checkout@v2

    # In this step, this action saves a list of existing images,
    # the cache is created without them in the post run.
    # It also restores the cache if it exists.
    - uses: satackey/action-docker-layer-caching@v0.0.11
      # Ignore the failure of a step and avoid terminating the job.
      continue-on-error: true
    # When copying this job to add another microservice, update the image tag value
    # below (for example, 'backend' instead of 'webapp'). Also update the 'docker build'
    # command to build the new microservice's Dockerfile in the repository.

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: {% raw %}${{ env.REGISTRY }}{% endraw %}
        username: {% raw %}${{ github.actor }}{% endraw %}
        password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        logout: false

    - name: Build, tag, and push {{ app_id }} api image
      id: build-image
      env:
        ECR_REGISTRY: {% raw %}${{ steps.login-ecr.outputs.registry }}{% endraw %}
        ECR_REPOSITORY: github-actions-prod
        IMAGE_TAG: prod-{{ app_id }}-api-{% raw %}${{ github.sha }}{% endraw %}
      run: |
        docker pull {% raw %}${{ env.TARGET_IMAGE }}{% endraw %}
        docker tag {% raw %}${{ env.TARGET_IMAGE }}{% endraw %} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    # When copying this job to add another microservice, update the name of the stack and the
    # service name below (for example, 'backend' instead of 'webapp'). Also add parameter
    # overrides below named 'LoadBalancerPath' and 'LoadBalancerPriority' (for example,
    # 'LoadBalancerPath=/backend/*,LoadBalancerPriority=2').
    - name: Deploy ECS service with CloudFormation
      id: service-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: prod-{{ app_id }}-api
        template: cloudformation-templates/{{ app_id }}-api_prod.yml
        no-fail-on-empty-changeset: "1"
        role-arn: arn:aws:iam::{% raw %}${{ steps.creds.outputs.aws-account-id }}{% endraw %}:role/github-actions-cloudformation-stack-role-prod
        parameter-overrides: >-
          LoadBalancerPath=/{{ app_id }}/*,
          LoadBalancerPriority={{ load_balancer_priority }},
          EnvFileArn=arn:aws:s3:::prod.lware.environment/{{ app_id }}-api.env,
          ContainerPort=5000,
          EnvTag=prod,
          ServiceName=prod-{{ app_id }}-api,
          ImageUrl={% raw %}${{ steps.build-image.outputs.image }}{% endraw %}
    - name: Print service URL
      env:
        URL: {% raw %}${{ steps.service-stack.outputs.ServiceURL }}{% endraw %}
      run: |
        echo "Service URL: $URL"
