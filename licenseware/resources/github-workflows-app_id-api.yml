name: Deploy {{ app_id.upper() }} Api DEV
concurrency: dev-deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  TARGET_IMAGE: ghcr.io/{% raw %}${{ github.repository }}{% endraw %}:latest
  ECR_REPOSITORY: {% raw %}${{ github.repository }}{% endraw %}
  REGION: eu-central-1

jobs:
build-image:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: {% raw %}${{ env.REGISTRY }}{% endraw %}
          username: {% raw %}${{ github.actor }}{% endraw %}
          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          logout: false

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.TARGET_IMAGE }}
          labels: |
            org.opencontainers.image.source={% raw %}${{ github.server_url }}/${{ github.repository }}{% endraw %}

  deploy-{{ app_id }}-api:
    needs: build-image
    name: Deploy {{ app_id }} api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
          aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
          aws-region: {% raw %}${{ env.REGION }}{% endraw %}

      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: {% raw %}${{ env.REGISTRY }}{% endraw %}
          username: {% raw %}${{ github.actor }}{% endraw %}
          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          logout: false

      - name: Build, tag, and push {{ app_id }} api image
        id: build-image
        env:
          ECR_REGISTRY: {% raw %}${{ steps.login-ecr.outputs.registry }}{% endraw %}
          ECR_REPOSITORY: {% raw %}${{ env.ECR_REPOSITORY }}{% endraw %}
          IMAGE_TAG: {% raw %}${{ github.sha }}{% endraw %}
        run: |
          docker pull {% raw %}${{ env.TARGET_IMAGE }}{% endraw %}
          docker tag {% raw %}${{ env.TARGET_IMAGE }}{% endraw %} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy ECS service with CloudFormation
        id: service-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: dev-{{ app_id }}-api
          template: cloudformation-templates/{{ app_id }}-api.yml
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::{% raw %}${{ steps.creds.outputs.aws-account-id }}{% endraw %}:role/github-actions-cloudformation-stack-role-dev
          parameter-overrides: >-
            LoadBalancerPath=/{{ app_id }}/*,
            LoadBalancerPriority={{ load_balancer_priority }},
            EnvFileArn=arn:aws:s3:::dev.lware.environment/{{ app_id }}-api.env,
            ContainerPort=5000,
            EnvTag=dev,
            ServiceName=dev-{{ app_id }}-api,
            ImageUrl={% raw %}${{ steps.build-image.outputs.image }}{% endraw %}

      - name: Print service URL
        env:
          URL: {% raw %}${{ steps.service-stack.outputs.ServiceURL }}{% endraw %}
        run: |
          echo "Service URL: $URL"
