name: Deploy {{ entity_title }}Api DEV
concurrency: dev-deploy

on:
  push:
    branches:
      - main

{% raw %}
env:
  REGISTRY: ghcr.io
  TARGET_IMAGE: ghcr.io/${{ github.repository }}:latest
  ECR_REPOSITORY: ${{ github.repository }}
  REGION: eu-central-1
{% endraw %}
jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
{% raw %}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.TARGET_IMAGE }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
{% endraw %}

  deploy-{{ entity_dash }}-api:
    needs: build-image
    name: Deploy {{ entity_title }}Api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
{% raw %}
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
{% endraw %}
      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
{% raw %}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
{% endraw %}
      - name: Build, tag, and push {{ entity_title }}Api image
        id: build-image
{% raw %}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull ${{ env.TARGET_IMAGE }}
          docker tag ${{ env.TARGET_IMAGE }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
{% endraw %}
      - name: Deploy ECS service with CloudFormation
        id: service-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: dev-{{ entity_dash }}-api
          template: cloudformation-templates/{{ entity_dash }}-api.yml
          no-fail-on-empty-changeset: "1"
          {% raw %}
          role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role-dev
          {% endraw %}
          parameter-overrides: >-
            LoadBalancerPath=/{{ entity_dash }}/*,
            LoadBalancerPriority={{ load_balancer_priority }},
            EnvFileArn=arn:aws:s3:::dev.lware.environment/{{ entity_dash }}-api.env,
            ContainerPort=5000,
            EnvTag=dev,
            ServiceName=dev-{{ entity_dash }}-api,
            ImageUrl={% raw %}${{ steps.build-image.outputs.image }}{% endraw %}

      - name: Print service URL
        env:
          URL: {% raw %}${{ steps.service-stack.outputs.ServiceURL }}{% endraw %}
          
        run: |
          echo "Service URL: $URL"
