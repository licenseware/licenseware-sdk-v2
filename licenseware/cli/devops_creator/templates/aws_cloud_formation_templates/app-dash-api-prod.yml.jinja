AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  EnvFileArn:
    Type: String
    Description: 'the arn of the .env file on s3'
  EnvTag:
    Type: String
    Default: production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  LoadBalancerPath:
    Type: String
    Default: "*"
    Description: A path on the load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  LoadBalancerPriority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if you have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  NumProcessors:
    Type: Number
    Default: 4
    Description: Number of web server process workers
  NumThreads:
    Type: Number
    Default: 2
    Description: Number of web server thread workers
  NumBackgroundWorkers:
    Type: Number
    Default: 4
    Description: Number of web server thread workers
  ContainerCpu:
    Type: Number
    Default: 3072
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 6144
    Description: How much memory in megabytes to give the container
  RedisContainerName:
    Type: String
    Default: "{{ entity_dash }}-redis"
  RedisContainerCpu:
    Type: Number
    Default: 1024
  RedisContainerMemory:
    Type: Number
    Default: 2048
  OverallCPU:
    Type: Number
    Default: 4096
  OverallMemory:
    Type: Number
    Default: 8192
  UploadPath:
    Type: String
    Default: "/tmp/lware"

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub {% raw %}${EnvTag}{% endraw %}-service-{% raw %}${ServiceName}{% endraw %}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref 'OverallCPU'
      Memory: !Ref 'OverallMemory'
      Family: !Sub {% raw %}${EnvTag}{% endraw %}-{% raw %}${ServiceName}{% endraw %}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:ECSTaskExecutionRole
      TaskRoleArn:
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:ECSGeneralRole
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
            #efs needs port 2049 to work
            - ContainerPort: 2049
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub {% raw %}${EnvTag}{% endraw %}-service-{% raw %}${ServiceName}{% endraw %}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          Environment:
            - Name: NUM_PROCESSORS
              Value: !Ref 'NumProcessors'
            - Name: NUM_THREADS
              Value: !Ref 'NumThreads'
            - Name: NUM_BACKGROUND_WORKERS
              Value: !Ref 'NumBackgroundWorkers'
            - Name: REDIS_HOST
              Value: localhost
            - Name: FILE_UPLOAD_PATH
              Value: !Ref 'UploadPath'
          EnvironmentFiles:
            - Type: s3
              Value: !Ref 'EnvFileArn'
          MountPoints:
            - SourceVolume: {{ entity_title }}ApiStorage
              ContainerPath: !Ref 'UploadPath'
              ReadOnly: false
          DependsOn:
            - Condition: 'START'
              ContainerName: !Ref 'RedisContainerName'
        - Name: !Ref 'RedisContainerName'
          Cpu: !Ref 'RedisContainerCpu'
          Memory: !Ref 'RedisContainerMemory'
          Image: redis:6-alpine
      Volumes:
        - Name: {{ entity_title }}ApiStorage
          EFSVolumeConfiguration:
            FilesystemId: !Ref {{ entity_title }}Storage
            TransitEncryption: "ENABLED"
            AuthorizationConfig:
              AccessPointId: !Ref {{ entity_title }}EfsAccessPoint

  {{ entity_title }}Storage:
    Type: AWS::EFS::FileSystem

  {{ entity_title }}ApiStorageMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref {{ entity_title }}Storage
      SubnetId: 
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}-lware-vpc-PrivateSubnetA
      SecurityGroups:
      - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:EFSAccessSecurityGroup

  {{ entity_title }}ApiStorageMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref {{ entity_title }}Storage
      SubnetId: 
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}-lware-vpc-PrivateSubnetB
      SecurityGroups:
      - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:EFSAccessSecurityGroup

  {{ entity_title }}EfsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref {{ entity_title }}Storage
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        Path: !Ref 'UploadPath'
        CreationInfo:
          OwnerUid: '1000'
          OwnerGid: '1000'
          Permissions: '0774'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub {% raw %}${EnvTag}{% endraw %}-{% raw %}${ServiceName}{% endraw %}
      Cluster:
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: !Ref 'DesiredCount'
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}-lware-vpc-PrivateSubnetA
            - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}-lware-vpc-PrivateSubnetB
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /odb/swagger.json 
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}-lware-vpc-VPC
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 5

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'LoadBalancerPath']
      ListenerArn:
        Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:PublicListenerHttps
      Priority: !Ref 'LoadBalancerPriority'

Outputs:
  ServiceURL:
    Value:
      Fn::Join:
        - ""
        - - Fn::ImportValue: !Sub {% raw %}${EnvTag}{% endraw %}:ExternalUrl
          - !Join [ "", !Split [ "*" , !Ref LoadBalancerPath ] ]
  {{ entity_title }}Storage:
    Description: The {{ entity_title }} storage
    Value: !Ref '{{ entity_title }}Storage'
    Export:
      Name: !Sub {% raw %}${EnvTag}{% endraw %}:{{ entity_title }}Storage
